#!/usr/bin/env python

import argparse

import matplotlib.pyplot as pp
import numpy as np
import scipy.stats as sps

from bnb import BetaNegativeBinomial

parser = argparse.ArgumentParser(description="Plot the converging redundancy")
parser.add_argument("-n", type=int, default=64, help="Number of packets")
parser.add_argument("-p",
                    "--p0",
                    type=float,
                    default=0.9,
                    help="Minimum success probability")
parser.add_argument("--mean",
                    type=float,
                    required=True,
                    help="Mean of the beta distribution")
parser.add_argument("--out", help="Optional output file")

arguments = parser.parse_args()

if arguments.mean > 0.5:
    alpha = arguments.mean / (1.0 - arguments.mean)
    beta = 1.0
else:
    alpha = 1.0
    beta = 1 / arguments.mean - 1

n = arguments.n
kmax = 500
p0 = arguments.p0
rvs = [BetaNegativeBinomial(n, k * alpha, k * beta) for k in range(1, kmax)]

X = [sps.beta.var(k * alpha, k * beta) for k in range(1, kmax)]
Y = [rv.iCDFapprox(p0) for rv in rvs]

limit = [sps.nbinom.ppf(p0, n, arguments.mean) for k in range(1, kmax)]

pp.plot(X, Y, "s--", lw=2)
pp.plot(X, limit, "-", lw=2)

pp.gca().invert_xaxis()
pp.xscale("log")
pp.xlabel("Variance of estimate")
pp.ylabel("Number of redundant packets")

if arguments.out:
    pp.savefig(arguments.out)
else:
    pp.show()
